[{"/Users/hiro/projects/hooks-snake-game/src/App.js":"1","/Users/hiro/projects/hooks-snake-game/src/components/Button.jsx":"2","/Users/hiro/projects/hooks-snake-game/src/components/Navigation.jsx":"3","/Users/hiro/projects/hooks-snake-game/src/components/ManipulationPanel.jsx":"4","/Users/hiro/projects/hooks-snake-game/src/components/Field.jsx":"5"},{"size":5214,"mtime":1612080642555,"results":"6","hashOfConfig":"7"},{"size":590,"mtime":1612081415579,"results":"8","hashOfConfig":"7"},{"size":1321,"mtime":1612080767001,"results":"9","hashOfConfig":"7"},{"size":1110,"mtime":1612081764457,"results":"10","hashOfConfig":"7"},{"size":310,"mtime":1612073940329,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1w3v44g",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hiro/projects/hooks-snake-game/src/App.js",["23","24"],"import React, { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation'\nimport Field from './components/Field'\nimport Button from './components/Button'\nimport ManipulationPanel from './components/ManipulationPanel'\nimport { initFields, getFoodPosition } from './utils'\n\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval = 100\nconst defaultDifficulty = 3\n\nconst Difficulty = [1000, 500, 100, 50, 10]\n\nconst GameStatus = Object.freeze({\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n})\n\nconst Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down: 'down'\n})\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x:  1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n})\n\n  let timer = undefined\n \n  const unsubscribe = () => {\n    if (!timer) {\n      return\n    }\n    clearInterval(timer)\n  }\n\n  const isCollision = (fieldSize, position) => {\n    if (position.y < 0 || position.x < 0) {\n      return true;\n    }\n \n    if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n      return true;\n    }\n \n    return false;\n  };\n\n  const isEatingMyself = (fields, position) => {\n    return fields[position.y][position.x] === 'snake'\n  }\n\nfunction App() {\n  const [fields, setFields] = useState(initialValues)\n  const [body, setBody] = useState([])\n  const [status, setStatus] = useState(GameStatus.init)\n  const [direction, setDirection] = useState(Direction.up)\n  const [difficulty, setDifficulty] = useState(defaultDifficulty)\n  const [tick, setTick] = useState(0)\n\n  useEffect(() => {\n    setBody([initialPosition])\n\n    // ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty - 1]\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, interval)\n    return unsubscribe\n  }, [difficulty])\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) {\n      return\n    }\n    const canContinue = handleMoving()\n     if (!canContinue) {\n       setStatus(GameStatus.gameover)\n     }\n  }, [tick])\n\n  const onStart = () => setStatus(GameStatus.playing)\n\n  const onStop = () => setStatus(GameStatus.suspended)\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    // setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    setBody([initialPosition])\n    setDirection(Direction.up)\n    setFields(initFields(35, initialPosition))\n  }\n\n  const onChangeDirection = useCallback((newDirection) => {\n    if (status !== GameStatus.playing) {\n      return direction\n    }\n    if (OppositeDirection[direction] === newDirection) {\n      return\n    }\n    setDirection(newDirection)\n  }, [direction ,status])\n\n  const onChangeDifficulty = useCallback((difficulty) => {\n    if (status !== GameStatus.init) {\n      return\n    }\n    if (difficulty < 1 || difficulty > Difficulty.length) {\n      return\n    }\n    setDifficulty(difficulty)\n  }, [status, difficulty])\n \n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n\n      onChangeDirection(newDirection);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [onChangeDirection])\n\n  const handleMoving = () => {\n    const { x, y } = body[0]\n    const delta = Delta[direction]\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n       unsubscribe()\n       return false\n     }\n     const newBody = [...body]\n     if (fields[newPosition.y][newPosition.x] !== 'food') {\n       const removingTrack = newBody.pop()\n       fields[removingTrack.y][removingTrack.x] = ''\n      } else {\n        const food = getFoodPosition(fields.length, [...newBody, newPosition])\n        fields[food.y][food.x] = 'food'\n      }\n    fields[newPosition.y][newPosition.x] = 'snake'\n    newBody.unshift(newPosition)\n\n    setBody(newBody)\n    setFields(fields)\n    return true\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n         <div className=\"title-container\">\n           <h1 className=\"title\">Snake Game</h1>\n         </div>\n         <Navigation \n         length={body.length} \n         difficulty={difficulty} \n         onChangeDifficulty={onChangeDifficulty}\n         />\n       </header>\n       <main className=\"main\">\n       <Field fields={fields} />\n       </main>\n       \n       <footer className=\"footer\">\n         <Button\n           status={status}\n           onStop={onStop}\n           onStart={onStart}\n           onRestart={onRestart}\n         />\n         <ManipulationPanel onChange={onChangeDirection} />\n       </footer>      \n    </div>\n  );\n}\n\nexport default App;\n","/Users/hiro/projects/hooks-snake-game/src/components/Button.jsx",[],"/Users/hiro/projects/hooks-snake-game/src/components/Navigation.jsx",[],"/Users/hiro/projects/hooks-snake-game/src/components/ManipulationPanel.jsx",[],"/Users/hiro/projects/hooks-snake-game/src/components/Field.jsx",[],{"ruleId":"25","severity":1,"message":"26","line":102,"column":6,"nodeType":"27","endLine":102,"endColumn":12,"suggestions":"28"},{"ruleId":"25","severity":1,"message":"29","line":137,"column":6,"nodeType":"27","endLine":137,"endColumn":26,"suggestions":"30"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body.length', 'handleMoving', and 'status'. Either include them or remove the dependency array.","ArrayExpression",["31"],"React Hook useCallback has an unnecessary dependency: 'difficulty'. Either exclude it or remove the dependency array.",["32"],{"desc":"33","fix":"34"},{"desc":"35","fix":"36"},"Update the dependencies array to be: [body.length, handleMoving, status, tick]",{"range":"37","text":"38"},"Update the dependencies array to be: [status]",{"range":"39","text":"40"},[2368,2374],"[body.length, handleMoving, status, tick]",[3277,3297],"[status]"]